import aperture;
import buffers.scene;
import lib.common;
import lib.light.fresnel;
import lib.sky.common;
import lib.sky.sample_transmit;
import lib.sky.sample_irradiance;
import lib.sky.sample_view;
import lib.sky.sample_light;
import lib.shadow;
import lib.material.pbr;
import lib.material.parallax;
import lib.tbn;

extern static const float BLOCK_LUX;
extern static const bool RENDER_TERRAIN = false;
extern static const bool RENDER_PARTICLES = false;
extern static const bool TAA_Enabled;
extern static const bool Debug_WhiteWorld;

static const bool SupportsParallax = Parallax_Enabled && !RENDER_PARTICLES;
static const bool SupportsTexNormals = !RENDER_PARTICLES;

struct VertexOutput {
    float4 position : SV_Position;

    float4 color;
    float2 uv;
    float2 light;
    float3 normal;
    float occlusion;
    float4 tangent;
    float3 viewPos;
    float3 localPos;
};

[[shader("vertex")]]
VertexOutput vertexMain(Vertex input) {
    VertexOutput output;

    float3 modelPos = input.pos().xyz;
    output.viewPos = mul3(input.viewMatrix(), modelPos);
    output.position = mul(input.projectionMatrix(), float4(output.viewPos, 1.0));
    output.localPos = mul3(ap.camera.viewInv, output.viewPos);

    output.uv = input.uv();
    output.color = input.color();
    output.light = input.light();

    output.occlusion = 1.0;
    if (RENDER_TERRAIN) {
        output.occlusion = input.ao();
    }

    output.normal = 0.0;//mul(float3x3(ap.camera.viewInv), float3(0,0,1));
    if (let normal = input.normal()) {
        output.normal = mul(input.normalMatrix(), normal);
        output.normal = mul(float3x3(ap.camera.viewInv), output.normal);
    }

    //output.tangent = 0.0;
    if (SupportsTexNormals) {
        if (let value = input.tangent()) {
            output.tangent.xyz = mul(input.normalMatrix(), value.xyz);
            output.tangent.xyz = mul(float3x3(ap.camera.viewInv), output.tangent.xyz);
            output.tangent.xyz = normalize(output.tangent.xyz);
            output.tangent.w = value.w;
        }
    }

    if (let overlayColor = input.overlayColor()) {
        output.color = lerp(output.color, overlayColor, overlayColor.a);
    }

    if (TAA_Enabled) {
        output.position.xy += scene[0].taa_jitter * (2.0 * output.position.w);
    }

    return output;
}


struct FragmentOutput {
    float4 color : SV_Target0;
    //float2 velocity : SV_Target2;
};

[[shader("fragment")]]
FragmentOutput fragmentMain(VertexOutput input) {
    float LOD = albedoTex.CalculateLevelOfDetail(input.uv);

    float4 albedo = albedoTex.SampleLevel(input.uv, LOD) * input.color;
    iris_discardIfNeeded(albedo);

    albedo.rgb = RgbToLinear(albedo.rgb);
    if (Debug_WhiteWorld) albedo.rgb = 0.85;

    float4 normalData = normalTex.SampleLevel(input.uv, LOD);
    float4 specularData = specularTex.SampleLevel(input.uv, LOD);

    bool has_normal = true;
    float3 geo_normal = 0.0;
    if (dot(input.normal, input.normal) > EPSILON)
        geo_normal = normalize(input.normal);
    else has_normal = false;

    float3 tex_normal = geo_normal;
    if (SupportsTexNormals) {
        tex_normal = mat_normal(normalData.rgb);

        float3 tangent = normalize(input.tangent.xyz);
        float3x3 TBN = GetTBN(geo_normal, tangent, input.tangent.w);

        tex_normal = normalize(mul(tex_normal, TBN));
    }

    float roughness = mat_roughness(specularData.r);
    float f0_metal = mat_f0_metal(specularData.g);

    float lmcoord_y = input.light.g*input.light.g;

    float tex_ao = mat_occlusion(normalData.b);
    float occlusion = tex_ao * input.occlusion;

    float3 viewLocalDir = -normalize(input.localPos);

    float geo_NoLm = 1.0;
    if (has_normal) geo_NoLm = 1.0 - abs(dot(geo_normal, scene[0].SkyLightLocalDir));

    float viewDist = length(input.localPos);
    float normal_bias = geo_NoLm * (viewDist * 0.006 + 0.06);
    float offset_bias = viewDist * 0.002;

    float3 shadowLocalPos = geo_normal * normal_bias + input.localPos;
    float3 shadowViewPos = mul3(ap.celestial.view, shadowLocalPos);
    shadowViewPos.z += offset_bias;

    const float paddingBlocks = 0.05;
    int shadowCascade = GetShadowProjection(shadowViewPos, paddingBlocks);

    float shadow = 1.0;
    if (shadowCascade >= 0) {
        float3 shadowPos = mul3(ap.celestial.projection[shadowCascade], shadowViewPos).xyz * 0.5 + 0.5;
        shadow = SampleShadow(shadowPos, shadowCascade);
    }

    SurfaceData surface;
    surface.skyPos = getSkyPosition(input.localPos);
    surface.normal = tex_normal;
    surface.roughL = roughness*roughness;
    bool is_metal = f0_metal > (229.5/255.0);
    surface.f0 = is_metal ? albedo.rgb : f0_metal;
    surface.tint = is_metal ? albedo.rgb : 1.0;

    CelestialLight sun;
    sun.localDir = scene[0].SunLocalDir;
    sun.color = scene[0].SunColor * sampleSkyTransmit(surface.skyPos, sun.localDir);

    CelestialLight moon;
    moon.localDir = scene[0].MoonLocalDir;
    moon.color = scene[0].MoonColor * sampleSkyTransmit(surface.skyPos, moon.localDir);

    // float3 sss_ambient = sampleSkyIrradiance(-tex_normal) * lmcoord_y;
    //float3 sssFinal = texSssFinal[uv] * (sun.color + moon.color) + sss_ambient * sss;
    // diffuse += sssFinal / PI;

    bool shadowIsSun = dot(ap.celestial.position, ap.celestial.sunPosition) > 0.0;
    float NoVm = max(dot(tex_normal, viewLocalDir), 0.0);
    float3 diffuse = 0.0, specular = 0.0;

    sun.color *= shadowIsSun ? shadow : 1.0;
    SampleCelestial(diffuse, specular, sun, surface, viewLocalDir, NoVm);

    moon.color *= shadowIsSun ? 1.0 : shadow;
    SampleCelestial(diffuse, specular, moon, surface, viewLocalDir, NoVm);

    float3 sky_ambient = sampleSkyIrradiance(tex_normal) * lmcoord_y * occlusion;

    diffuse = diffuse / PI + sky_ambient;
    specular = specular;

    if (mat_isMetal(f0_metal)) diffuse *= roughness;

    float3 fragViewDir = normalize(input.viewPos);
    float3 viewNormal = mul(float3x3(ap.camera.view), tex_normal);
    float3 reflectViewDir = reflect(fragViewDir, viewNormal);
    float3 reflectLocalDir = mul(float3x3(ap.camera.viewInv), reflectViewDir);
    reflectLocalDir = normalize(reflectLocalDir);

    float3 skyColor = sampleSkyView(surface.skyPos, reflectLocalDir, scene[0].SunLocalDir);
    float3 F_NoV = F_schlickRough(NoVm, surface.f0, surface.roughL);
    specular += F_NoV * skyColor * ((1.0 - roughness) * lmcoord_y);
    //output.diffuse *= 1.0 - F_NoV;

    specular *= surface.tint;
    


    const float3 ambient = 0.02;
    float emission = mat_emission(specularData) * BLOCK_LUX;

    float4 color = albedo;
    color.rgb = albedo.rgb * (diffuse + emission + ambient) + specular;

    color.rgb *= color.a;

    FragmentOutput output;
    output.color = color;
    //output.velocity = 0.0;
    return output;
}
